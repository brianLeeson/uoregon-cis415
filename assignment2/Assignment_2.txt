Brian Leeson
CIS 415
Assignment #2

#1 OSC 4.14
a) How many threads will you create to perform the input and output? 
1 thread can handle both the input and the output. The input and the output cannot happen simultaneously so the is no need to create multiple threads to handle this both input and output.

b) How many threads will you create for the CPU-intensive portion of the application? 
4 threads to handle the CPU intensive portion. Iff we can assume that the data can be processes asynchronously we can keep all four processors busy with 4 threads. Because these threads don't need to write or read from disk, they should't need to wait and have another thread to replace them.

2. OSC 4.18
a) The number of kernel threads allocated to the program is FEWER than the number of
processing cores.
This program could run faster if given more thread as it could then be running on all cores concurrently.

b) The number of kernel threads allocated to the program is equal to the number of
processing cores. 
This program could potentially be running on all cores concurrently, taking full advantage of multi threading. Faster than a).

c) The number of kernel threads allocated to the program is greater than the number of
processing cores but is still less than the number of user-level threads. Should be faster than situation b) as more kernel threads means more flexibility when scheduling in case one of the threads is needs to wait.

3. OSC 6.6
I/O bound processes, on average, take less time one the CPU because it blocks more frequency than non I/O bound processes. A scheduler that favors processes based on past processor time will favor I/O for this reason. This should not starve CPU-bound programs as I/O takes a relatively long time to do and the process would be in a waiting queue during that time.

4. OSC 6.11
a) CPU utilization and response time.
Response time, the time it takes for an action to have an effect, goes down the with shorter limits on how long a process is allowed to use the CPU. However this creates more context switches and every time we do a context switch there is a period of time where the processor is not utilized. With a higher response time comes less utilization and visa versa.

b) Average turnaround time and maximum waiting time
In order to minimize the average turnaround time one would use a priority queue with the shortest jobs done first. These jobs would be done to completion. This algorithm will minimized the convoy effect and result in the shortest average turnaround time. However the max waiting time will be huge and the final process to run must wait until all other processes have finished. We can reduce the max wait time be only allowing processes to run for X time before giving control to the next process. Now our max wait time is X. This method increases the average turnaround time by potentially making processes take longer to complete.

c) I/O device utilization and CPU utilization
Without preemption (allowing a process to run until completion), we would maximize CPU utilization as it would do as few context switches as possible. However there would be a convoy effect as I/O processes sit in the ready to run queue waiting to run. With preemption we would could assign the the shorter I/O tasks to the CPU as soon as they are ready and increase I/O device utilization, but that would cause more context switches and decrease CPU utilization

5. Real-time scheduling
a) Rate monotonic (RM)
Rate monotonic works by scheduling jobs in order of shortest job first. It is a fixed schedule as it assigns the same priority to all jobs in a task, regardless of if it that job will miss its deadlines.

b) You are given a set of independent, periodic tasks: T1 = (0, 4, 1), T2 = (0, 8, 2), T3 = (0, 20, 2).
	i. There exists a feasible schedule for these tasks using RM. Why? (4 points)
	Show that total utilization <= scheduable utilization as RM is a nonOptimal algorithm
	total utilization = sum of e/p for all tasks. (1/4) + (2/8) + (2/20) = (3/5) = .6
	schedulable utilization = n(2^(1/n) - 1) = 3(2^(1/3) - 1) = 0.7798
	.6 < 0.7798, therefor a feasible schedule for these tasks exist.

	ii. A colleague asserts that π = 5 will work. Do you agree? Why or why not?
	if π = 5, T1 = (0, 4, 1), T2 = (0, 8, 2), T3 = (0, 20, 2),  T4 = (0, 5, 1)
	check if total utilization <= scheduable utilization:
		total utilization = sum of e/p for all tasks. (1/4) + (2/8) + (2/20) + (1/5) = (4/5) .8
		schedulable utilization = 0.7568
		total utilization is not <= schedulable utilization
	check hyperperiod:
		H = lcm {4, 8, 20, 5} = 40 (hyperperiod is below)
		Because all deadlines are met in the hyperperiod we can conclude that with the new task RM
		will create a feasible schedule.

HYPERPEROID with RM
T1 = (0, 4, 1), 
T2 = (0, 8, 2), 
T3 = (0, 20, 2),  
T4 = (0, 5, 1)
Time	Scheduled
0	J11
1	J41
2	J21
3	J21
4	J12
5	J42
6	J31
7	J31
8	J13		
9	J22
10	J43
11	J22
12	J14
13	-
14	-
15	J44
16	J15
17	J23
18	J23
19	-
20	J16
21	J45
22	J32
23	J32
24	J17
25	J46
26	J24
27	J24
28	J18
29	-
30	J47
31	-
32	J19
33	J25
34	J25
35	J48
36	J110
37	-
38	-
39	-
40	next hyperperoid
