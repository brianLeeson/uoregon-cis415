Brian Leeson
CIS 415
Assignment #3

1. OSC 7.16
a. Increase Available (new resources added)
	Can be made safely under all circumstances.

b. Decrease Available (resources are permanently removed from the system)
	Can only be made if the system remains in a safe state. If for all i, Finish[i] == true for all processes.

c. Increase Max for one process (the process needs or wants more resources than allowed)
	If recalcualtion fo the different M x N matrices is allowed, then yes provided that 
	the new max does not go over the number of reasources in the system.

d. Decrease Max for one process (the process decides it does not need that many resources)
	Decreasing max reasources requested is okay in all cercumstances.

e. Increase the number of processes
	Increasing the number of processes is okay in all cercumstances.
	
f. Decrease the number of processes
	Decreasing the number of processes is okay in all cercumstances.

2. OSC 8.13:
Contiguous Memory Allocation
	Over time CMA causes external fragmentation as processes finish out of allocation order. This requires managing the "holes" 
	left by completed processes. Depending on how this managing is done, more memory than is requested can be given to a process, 
	leading to internal fragmentation. Compared to other methods CMA makes it relatively simple to share code across the process as
	only the contiguous block must be traversed. It is also faster as it does not require requests to the MMU to find locations of code.
	All code is relative within the contiguous block.

Pure Segmentation
	Segmentation also will suffer from external fragmentation for the same reasons as CMA, but less so as processes are broken up into smaller segments

Pure Paging
