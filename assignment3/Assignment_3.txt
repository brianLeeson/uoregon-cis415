Brian Leeson
CIS 415
Assignment #3

1. OSC 7.16
a. Increase Available (new resources added)
	Can be made safely under all circumstances.

b. Decrease Available (resources are permanently removed from the system)
	Can only be made if the system remains in a safe state. If for all i, Finish[i] == true for all processes.

c. Increase Max for one process (the process needs or wants more resources than allowed)
	If recalculation of the different M x N matrices is allowed, then yes provided that 
	the new max does not go over the number of resources in the system.

d. Decrease Max for one process (the process decides it does not need that many resources)
	Decreasing max resources requested is okay in all circumstances.

e. Increase the number of processes
	Increasing the number of processes is okay in all circumstances. We could simply add a process and not allocate memory to it until 
	it is safe to do so.
	
f. Decrease the number of processes
	Decreasing the number of processes is okay in all circumstances.

2. OSC 8.13:
Contiguous Memory Allocation
	Over time CMA causes external fragmentation as processes finish out of allocation order. This requires managing the "holes" 
	left by completed processes. Depending on how this managing is done, more memory than is requested can be given to a process if 
	the process requests a relatively small amount of memory, leading to internal fragmentation. Because fragmentation can become severe 
	enough to require compaction, a process's assigned physical address may change. This potential for address change requires processes
	wishing to share data to know each others base addresses at all times. Processes cannot point to one copy of data like they can 
	in segmentation or paging

Pure Segmentation
	Segmentation also will suffer from external and internal fragmentation for the same reasons as CMA, but potentially less so as processes are
	broken up into smaller segments. Internal fragmentation will also occur for the sames reasons as CMA. Sharing code becomes less difficult than
	CMA as two separate processes can point to the same shared segment.
	
Pure Paging
	Avoids external fragmentation as every process is broken up into pages that evenly fit into frames, so there will never be a page too big
	to fit into a frame. Unless a process is exactly a multiple of the page size there will be internal fragmentation as the last section of the
	process must fit into a page. With paging we no longer have to worry about compaction. The physical address of the process fragment (page) 
	must be looked up by the MMU just like in Segmentation. Also, like segmentation, we can have two processes looking at the same section (page)
	to share data.

3. OSC 8.25:
a. If a memory reference takes 50 nanoseconds, how long does a paged memory reference take?
	100 ns. 50 ns for getting the address of the page table, 50 ns for getting the address of the byte.

b. If we add TLBs, and 75% of all page-table references are found in the TLBs, what is the effective memory reference time?
	effective access time = 0.75 × 52 + 0.25 × 100 = 64 ns 

4. OSC 9.14:
a. TLB miss with no page fault
	mapping not in TLB and accessing a valid page of the process in main memory
b. TLB miss and page fault
	mapping not in TLB and accessing an invalid page of the process or a page that has not been loaded in yet.
c. TLB hit and no page fault
	Mapping in TLB and accessing a valid page of the process in main memory
d. TLB hit and page fault
	Not possible as the TLB only contains valid mappings from pages to frames in main memory. 
	A fault would imply that either we aren't allowed to view it or it is not in memory.

5. OSC 9.21: series: 72312534677105462301
The series is given in order, with insertions that do not cause pages faults having been removed from the series.
a. LRU
	18 pages faults
	723153467105462301
b. FIFO
	17 pages faults
	72315467105462301
c. Optimal
	13 pages faults
	7231546704623
